import '@/styles/components/publishModal.scss';
import { DefaultButton, Icon, Label, Modal, Stack, TextField } from '@fluentui/react';
import React from 'react';
import { sendRequest } from '../../api';

interface props {
    isOpen: boolean,
    hideModal: Function,
    representations: any,
    dslName: string
}

const uploadProgram = (url: string, secret: string, name: string, representations: any) => {
    const dslContent = representations?.find(r => r.name == 'dsl')?.text || '{}'
    const codeContent = representations?.find(r => r.name == 'code')?.text || ''
    
    const keyFields = JSON.parse(dslContent)?.config_vars?.map(x => x?.name).join(',')
    
    const requestBody = {
        'name': name,
        'dsl': dslContent,
        'code': codeContent,
        'required_credentials': keyFields,
    }

    sendRequest({
        url: url,
        method: "POST",
        accessToken: secret,
        body: requestBody
    });
}

export const PublishModal = (props: props) => {
    const [message, setMessage] = React.useState('');
    const [secretKey, setSecretKey] = React.useState('');
    
    const resetModal = () => {
        setMessage('');
        setSecretKey('');
        props.hideModal();
    }
    
    return(
        <>
            <Modal
                isOpen={props.isOpen}
                isBlocking={true}
                onDismiss={() => props.hideModal()}
                className={'publish-modal-container'}
            >
                <Stack className='content'>
                    <Stack.Item>
                        <span className='header'>Get your project online</span>
                    </Stack.Item>
                    <Stack.Item>
                        <Stack horizontal className='input-fields'>
                            <Stack.Item>
                                <Label htmlFor={'installationUrl'}>Installation Url</Label>
                            </Stack.Item>
                            <Stack.Item>
                                <TextField 
                                    id={'installationUrl'}
                                    onChange={(e, value) => { setMessage(value || '') }}
                                    value={message}/>
                            </Stack.Item>
                        </Stack>
                        <Stack horizontal className='input-fields'>
                            <Stack.Item>
                                <Label htmlFor={'jbManagerSecret'}>JB Manager Secret</Label>
                            </Stack.Item>
                            <Stack.Item>
                                <TextField 
                                    id={'jbManagerSecret'}
                                    onChange={(e, value) => { setSecretKey(value || '') }}
                                    value={secretKey}/>
                            </Stack.Item>
                        </Stack>
                        <Stack>
                            <Stack.Item>
                                <p>
                                    You can find installation URL & secret after you log in to JB Manager. Link to JB Manager: https://linktoJBManager.com
                                </p>
                            </Stack.Item>
                            <Stack.Item>
                                <p>
                                <Icon iconName="WarningSolid" /> The code generated by AI may contain errors. We recommend 
you to test the bot using chat feature and also test it after publishing,
before you do wide-scale release.
                                </p>
                            </Stack.Item>
                        </Stack>
                    </Stack.Item>
                    <Stack.Item>
                        <Stack horizontal className={'footer-buttons'}>
                            <Stack.Item>
                                <DefaultButton className={'primary-button'} onClick={() => {
                                    uploadProgram(message, secretKey, props.dslName, props.representations);
                                    resetModal();
                                }}>Publish</DefaultButton>
                            </Stack.Item>
                            <Stack.Item>
                                <DefaultButton onClick={() => resetModal()}>Cancel</DefaultButton>
                            </Stack.Item>
                        </Stack>
                    </Stack.Item>
                </Stack>
            </Modal>
        </>
    )
}

export default PublishModal;